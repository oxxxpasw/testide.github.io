// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

// –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
document.addEventListener('DOMContentLoaded', function() {
    tg.ready();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ WebApp
    tg.expand(); // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º–æ–π Telegram
    if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    tg.MainButton.setParams({
        text: '–ù–ê–ß–ê–¢–¨ –ò–ì–†–£',
        color: '#007AFF'
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    showGames();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
tg.MainButton.onClick(() => {
    if (tg.MainButton.text === '–ù–ê–ß–ê–¢–¨ –ò–ì–†–£') {
        startGame();
    }
});

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    traits: {
        wisdom: 50,
        cruelty: 50,
        technology: 50
    },
    resources: {
        gold: 1000,
        food: 500
    },
    territories: {
        capital: {
            population: 1000,
            buildings: []
        }
    },
    advisors: [],
    activeEvents: [],
    abilities: {
        inspiration: {
            cooldown: 0
        }
    },
    diplomacy: {
        northKingdom: {
            relation: 50
        }
    },
    survived_days: 0,
    era: 'medieval',
    currentDecision: null
};

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function resetGameState() {
    gameState = {
        traits: {
            wisdom: 50,
            cruelty: 50,
            technology: 50
        },
        resources: {
            gold: 1000,
            food: 500
        },
        territories: {
            capital: {
                population: 1000,
                buildings: []
            }
        },
        advisors: [],
        activeEvents: [],
        abilities: {
            inspiration: {
                cooldown: 0
            }
        },
        diplomacy: {
            northKingdom: {
                relation: 50
            }
        },
        survived_days: 0,
        era: 'medieval',
        currentDecision: null
    };
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
function calculateScore(state) {
    let score = state.survived_days * 10; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
    
    // –ë–æ–Ω—É—Å –∑–∞ —ç–ø–æ—Ö—É
    const eraBonus = {
        medieval: 1,
        industrial: 1.5,
        space: 2
    };
    score *= eraBonus[state.era];
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const avgTrait = Object.values(state.traits).reduce((a, b) => a + b, 0) / 3;
    if (avgTrait > 50) score *= 1.2;
    
    return Math.round(score);
}

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const achievements = {
    survivor: {
        id: 'survivor',
        title: 'üåü –í—ã–∂–∏–≤—à–∏–π',
        description: '–ü—Ä–æ–∂–∏—Ç—å 50 –¥–Ω–µ–π',
        condition: (state) => state.survived_days >= 50,
        reward: 100
    },
    wisdom_master: {
        id: 'wisdom_master',
        title: 'üß† –ú—É–¥—Ä–µ—Ü',
        description: '–î–æ—Å—Ç–∏—á—å –º—É–¥—Ä–æ—Å—Ç–∏ 80+',
        condition: (state) => state.traits.wisdom >= 80,
        reward: 150
    },
    balanced: {
        id: 'balanced',
        title: '‚öñÔ∏è –ì–∞—Ä–º–æ–Ω–∏—è',
        description: '–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã—à–µ 60',
        condition: (state) => Object.values(state.traits).every(v => v >= 60),
        reward: 200
    },
    space_age: {
        id: 'space_age',
        title: 'üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç—Ä–∞',
        description: '–î–æ—Å—Ç–∏—á—å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç—Ä—ã',
        condition: (state) => state.era === 'space',
        reward: 300
    }
};

// –†–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ä
const decisions = {
    medieval: [
        {
            question: "–£—á–µ–Ω—ã–π –ø—Ä–æ—Å–∏—Ç —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–≤–µ–∑–¥",
            approve: {
                effect: "–ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã",
                traits: { wisdom: 15, technology: 10, cruelty: -5 }
            },
            deny: {
                effect: "–†–µ—Å—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                traits: { wisdom: -5, technology: -5, cruelty: 0 }
            }
        },
        {
            question: "–°–æ–≤–µ—Ç–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
            approve: {
                effect: "–ù–∞—Ä–æ–¥ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω, –Ω–æ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π —Ä–∞—Å—Ç–µ—Ç",
                traits: { wisdom: 10, cruelty: 5, technology: 5 }
            },
            deny: {
                effect: "–ù–∞—Ä–æ–¥ –¥–æ–≤–æ–ª–µ–Ω, –Ω–æ —Ä–∞–∑–≤–∏—Ç–∏–µ –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è",
                traits: { wisdom: -5, cruelty: -5, technology: -5 }
            }
        }
    ],
    industrial: [
        {
            question: "–ò–Ω–∂–µ–Ω–µ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–≤—É—é —Ñ–∞–±—Ä–∏–∫—É",
            approve: {
                effect: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ —ç–∫–æ–ª–æ–≥–∏—è —Å—Ç—Ä–∞–¥–∞–µ—Ç",
                traits: { technology: 15, wisdom: 5, cruelty: 10 }
            },
            deny: {
                effect: "–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                traits: { technology: -10, wisdom: 5, cruelty: -5 }
            }
        }
    ],
    space: [
        {
            question: "–†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—é –ú–∞—Ä—Å–∞ —á–∞—Å—Ç–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º?",
            approve: {
                effect: "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–∫–æ—Ä—è–µ—Ç—Å—è, –Ω–æ —Ä–∞—Å—Ç–µ—Ç –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ",
                traits: { technology: 7, wisdom: -2 }
            },
            deny: {
                effect: "–†–∞–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
                traits: { wisdom: 4, technology: -4 }
            }
        },
        {
            question: "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–∑–Ω–∞–Ω–∏–µ –ª—é–¥–µ–π –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –±–µ—Å—Å–º–µ—Ä—Ç–∏–µ?",
            approve: {
                effect: "–ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ, –Ω–æ —á—Ç–æ —Ç–∞–∫–æ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å?",
                traits: { technology: 9, wisdom: -5, cruelty: 3 }
            },
            deny: {
                effect: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞, –Ω–æ —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è",
                traits: { wisdom: 8, technology: -6 }
            }
        }
    ]
};

// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
let levelSystem, diarySystem, collectionsSystem, dailyTasksSystem;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = [
        'mainMenu',
        'gameScreen',
        'leaderboardScreen',
        'achievementsScreen',
        'diaryScreen',
        'collectionsScreen',
        'dailyTasksScreen'
    ];
    
    screens.forEach(id => {
        const screen = document.getElementById(id);
        if (screen) {
            screen.style.display = 'none';
        }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const screenToShow = document.getElementById(screenId);
    if (screenToShow) {
        screenToShow.style.display = 'flex';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞
        switch(screenId) {
            case 'leaderboardScreen':
                updateLeaderboard();
                break;
            case 'achievementsScreen':
                updateAchievements();
                break;
            case 'diaryScreen':
                if (diarySystem) diarySystem.updateDiaryUI();
                break;
            case 'collectionsScreen':
                if (collectionsSystem) collectionsSystem.updateCollectionsUI();
                break;
            case 'dailyTasksScreen':
                if (dailyTasksSystem) dailyTasksSystem.updateTasksUI();
                break;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
function startGame() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    tg.MainButton.hide();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const savedProgress = loadPlayerProgress();
    if (savedProgress) {
        gameState = savedProgress;
    } else {
        resetGameState();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    initGame();
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
function showMainMenu() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    mainContent.innerHTML = `
        <div class="main-menu">
            <h1 class="game-title">–ü—Ä–∞–≤–∏—Ç–µ–ª—å</h1>
            
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ -->
            <div class="player-stats-container">
                <div class="best-score">
                    üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${getBestScore()}
                </div>
                <div class="total-games">
                    üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: ${getTotalGames()}
                </div>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é -->
            <div class="menu-buttons">
                <button class="menu-button primary" onclick="startGame()">
                    <span class="button-icon">‚ñ∂Ô∏è</span>
                    –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                </button>
                
                <button class="menu-button" onclick="showLeaderboard()">
                    <span class="button-icon">üèÜ</span>
                    –†–µ–π—Ç–∏–Ω–≥
                </button>
                
                <button class="menu-button" onclick="showTutorial()">
                    <span class="button-icon">üìñ</span>
                    –ö–∞–∫ –∏–≥—Ä–∞—Ç—å
                </button>
            </div>

            <!-- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è -->
            <div class="recent-achievements">
                <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                <div class="achievements-list">
                    ${getRecentAchievements()}
                </div>
            </div>
        </div>
    `;
}

function hideAllScreens() {
    const screens = document.querySelectorAll('.menu-screen, #gameScreen, #leaderboardScreen, #achievementsScreen, .game-over-screen');
    screens.forEach(screen => {
        if (screen) {
            screen.style.display = 'none';
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
function initGame() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.ready();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
    const playerProfile = showPlayerProfile();
    mainContent.prepend(playerProfile);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    resetGameState();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
    initializeAdvisors();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
    initializeTerritories();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateInterface();
    generateNewDecision();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª
    startDailyCycle();
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–∞–π–ø–æ–≤
function initSwipeHandlers(card, decision) {
    let startX = 0;
    let currentX = 0;
    
    card.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
    }, { passive: true });

    card.addEventListener('touchmove', (e) => {
        currentX = e.touches[0].clientX;
        const deltaX = currentX - startX;
        
        if (Math.abs(deltaX) > 20) {
            const isRight = deltaX > 0;
            showStatChanges(isRight, decision); // –ü—Ä–∞–≤—ã–π —Å–≤–∞–π–ø - –ø—Ä–∏–Ω—è—Ç—å, –ª–µ–≤—ã–π - –æ—Ç–∫–∞–∑–∞—Ç—å
            card.style.transform = `translateX(${deltaX}px) rotate(${deltaX * 0.1}deg)`;
            card.style.background = isRight ? '#4CAF50' : '#ff4444';
        }
    }, { passive: true });

    card.addEventListener('touchend', (e) => {
        const deltaX = currentX - startX;
        if (Math.abs(deltaX) > 100) {
            makeDecision(deltaX > 0); // –ü—Ä–∞–≤—ã–π —Å–≤–∞–π–ø - –ø—Ä–∏–Ω—è—Ç—å, –ª–µ–≤—ã–π - –æ—Ç–∫–∞–∑–∞—Ç—å
        } else {
            card.style.transform = '';
            card.style.background = '';
            hideStatChanges();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
function generateNewDecision() {
    const gameElements = document.querySelector('.game-elements');
    if (!gameElements) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const oldCard = document.querySelector('.decision-card');
    if (oldCard) {
        oldCard.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const newCard = document.createElement('div');
    newCard.className = 'decision-card';
    gameElements.appendChild(newCard);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    const newDecision = getContextualDecision();
    gameState.currentDecision = newDecision;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞
    const denyEffects = {
        wisdom: -Math.floor(Math.random() * 8) - 3,
        cruelty: -Math.floor(Math.random() * 8) - 3,
        technology: -Math.floor(Math.random() * 8) - 3
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç–∫–∞–∑–∞ –≤ —Ä–µ—à–µ–Ω–∏–∏
    newDecision.deny = {
        traits: denyEffects
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    updateDecisionCard(newDecision);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ—à–µ–Ω–∏–π
function checkDecisionRequirements(decision) {
    // –ï—Å–ª–∏ —É —Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ–Ω–æ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (!decision.requirements) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
    const requirements = decision.requirements;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ä—ã
    if (requirements.era && requirements.era !== gameState.era) {
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if (requirements.minTraits) {
        for (const [trait, minValue] of Object.entries(requirements.minTraits)) {
            if (gameState.traits[trait] < minValue) {
                return false;
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if (requirements.maxTraits) {
        for (const [trait, maxValue] of Object.entries(requirements.maxTraits)) {
            if (gameState.traits[trait] > maxValue) {
                return false;
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (requirements.minDays && gameState.survived_days < requirements.minDays) {
        return false;
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
    return true;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getContextualDecision –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function getContextualDecision() {
    const eraDecisions = decisions[gameState.era];
    if (!eraDecisions || eraDecisions.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —ç—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        return {
            question: "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ",
            approve: {
                effect: "–î–µ–Ω—å –ø—Ä–æ—à–µ–ª —Å–ø–æ–∫–æ–π–Ω–æ",
                traits: { wisdom: 5, cruelty: 0, technology: 3 }
            },
            deny: {
                effect: "–î–µ–Ω—å –ø—Ä–æ—à–µ–ª –≤ –∑–∞–±–æ—Ç–∞—Ö",
                traits: { wisdom: -3, cruelty: 0, technology: -3 }
            }
        };
    }

    const availableDecisions = eraDecisions.filter(decision => checkDecisionRequirements(decision));
    
    if (availableDecisions.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑ —ç—Ä—ã
        return eraDecisions[Math.floor(Math.random() * eraDecisions.length)];
    }

    return availableDecisions[Math.floor(Math.random() * availableDecisions.length)];
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—à–µ–Ω–∏—è
function updateDecisionCard(decision) {
    const decisionCard = document.querySelector('.decision-card');
    if (!decisionCard) return;

    const randomImage = `https://api.dicebear.com/7.x/pixel-art/svg?seed=${Math.random()}`;

    decisionCard.innerHTML = `
        <div class="character-image">
            <img src="${randomImage}" alt="Character">
        </div>
        <div class="decision-text">${decision.question}</div>
        <div class="decision-effects">
            <div class="effects-column">
                <div class="effects-header">‚Üí –ü—Ä–∏–Ω—è—Ç—å</div>
                <div class="effects-list">
                    ${renderEffectsList(decision.approve.traits)}
                </div>
            </div>
            <div class="effects-column">
                <div class="effects-header">–û—Ç–∫–∞–∑–∞—Ç—å ‚Üê</div>
                <div class="effects-list">
                    ${renderEffectsList(decision.deny.traits)}
                </div>
            </div>
        </div>
    `;

    initSwipeHandlers(decisionCard, decision);
}

function renderEffectsList(effects) {
    const icons = {
        wisdom: 'üß†',
        cruelty: '‚öîÔ∏è',
        technology: '‚öôÔ∏è'
    };

    return Object.entries(effects)
        .map(([trait, value]) => {
            const isPositive = value > 0;
            const valueClass = isPositive ? 'positive' : 'negative';
            const sign = isPositive ? '+' : '';
            
            return `
                <div class="effect-item">
                    <span class="effect-icon">${icons[trait]}</span>
                    <span class="effect-value ${valueClass}">${sign}${value}</span>
                </div>
            `;
        })
        .join('');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è
function makeDecision(choice) {
    if (!gameState.currentDecision) return;

    // –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ (approve –∏–ª–∏ deny)
    const effects = choice ? gameState.currentDecision.approve : gameState.currentDecision.deny;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (effects && effects.traits) {
        Object.entries(effects.traits).forEach(([trait, change]) => {
            if (gameState.traits[trait] !== undefined) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                const newValue = Math.max(0, Math.min(100, gameState.traits[trait] + change));
                gameState.traits[trait] = newValue;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const barFill = document.querySelector(`#${trait}-bar .stat-bar-fill`);
                const valueEl = document.querySelector(`#${trait}-bar + .stat-value`);
                
                if (barFill) {
                    barFill.style.width = `${newValue}%`;
                }
                if (valueEl) {
                    valueEl.textContent = Math.round(newValue);
                }
            }
        });
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
    gameState.survived_days++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if (checkGameOver()) {
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    generateNewDecision();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateInterface() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStatBars();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥ –∏ –≤—Ä–µ–º—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è
    updateTimeAndEra();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const traits = ['wisdom', 'cruelty', 'technology'];
    traits.forEach(trait => {
        const statValue = document.querySelector(`.${trait}-value`);
        if (statValue) {
            statValue.textContent = gameState.traits[trait];
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ—Ä—Ç–∏
function checkDeath() {
    const isDead = Object.values(gameState.traits).some(value => value <= 0 || value >= 100);
    if (isDead) {
        endGame();
    }
    return isDead;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function updateStatBars() {
    Object.entries(gameState.traits).forEach(([trait, value]) => {
        const barFill = document.querySelector(`#${trait}-bar .stat-bar-fill`);
        const valueEl = document.querySelector(`#${trait}-bar + .stat-value`);
        
        if (barFill) {
            barFill.style.width = `${value}%`;
        }
        if (valueEl) {
            valueEl.textContent = Math.round(value);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–Ω–µ–π
function updateDayCounter() {
    const counter = document.getElementById('day-counter');
    if (counter) {
        counter.textContent = gameState.survived_days;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ä—ã
function updateEraDisplay() {
    const eraText = document.getElementById('era-text');
    if (eraText) {
        const eraNames = {
            medieval: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
            industrial: '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è —ç—Ä–∞',
            space: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç—Ä–∞'
        };
        eraText.textContent = eraNames[gameState.era];
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
function endGame() {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Ä–∞–Ω—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const existingScreens = document.querySelectorAll('.game-over-screen');
    existingScreens.forEach(screen => screen.remove());

    const gameOverScreen = document.createElement('div');
    gameOverScreen.className = 'game-over-screen';
    
    gameOverScreen.innerHTML = `
        <div class="game-over-content">
            <h2 class="game-over-title">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</h2>
            
            <div class="game-stats">
                <p>–ü—Ä–æ–∂–∏—Ç–æ –¥–Ω–µ–π: ${gameState.survived_days}</p>
                <p>–≠–ø–æ—Ö–∞: ${getEraName(gameState.era)}</p>
                <p>–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞: ${getDeathReason()}</p>
            </div>

            <div class="final-traits">
                <p>–ú—É–¥—Ä–æ—Å—Ç—å: ${gameState.traits.wisdom}%</p>
                <p>–ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å: ${gameState.traits.cruelty}%</p>
                <p>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${gameState.traits.technology}%</p>
            </div>

            <div class="game-over-buttons">
                <button class="restart-button" id="restartGameBtn">
                    <span class="button-icon">üîÑ</span>
                    –ù–ê–ß–ê–¢–¨ –ó–ê–ù–û–í–û
                </button>
                <button class="menu-button" id="returnToMenuBtn">
                    <span class="button-icon">üè†</span>
                    –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(gameOverScreen);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const styles = `
        .game-over-screen {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .game-over-content {
            background: white;
            padding: 20px;
            border-radius: 16px;
            max-width: 90%;
            width: 400px;
            text-align: center;
        }

        .game-over-title {
            font-size: 24px;
            margin-bottom: 20px;
            color: #333;
        }

        .game-stats, .final-traits {
            margin-bottom: 20px;
            text-align: left;
        }

        .game-over-buttons {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .restart-button, .menu-button {
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .restart-button {
            background: #4CAF50;
            color: white;
        }

        .menu-button {
            background: #666;
            color: white;
        }
    `;

    const styleSheet = document.createElement('style');
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    const restartButton = gameOverScreen.querySelector('#restartGameBtn');
    const menuButton = gameOverScreen.querySelector('#returnToMenuBtn');

    if (restartButton) {
        restartButton.addEventListener('click', () => {
            gameOverScreen.remove();
            startGame();
        });
    }

    if (menuButton) {
        menuButton.addEventListener('click', () => {
            gameOverScreen.remove();
            showGames();
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞
function getDeathReason() {
    const { wisdom, cruelty, technology } = gameState.traits;
    
    if (wisdom >= 100) return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º—É–¥—Ä–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ–ª–æ –∫ –æ—Ç—Ä–µ—à–µ–Ω–∏—é –æ—Ç –º–∏—Ä–∞";
    if (wisdom <= 0) return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –º—É–¥—Ä–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ–ª –∫ –∫—Ä–∞—Ö—É";
    if (cruelty >= 100) return "–ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è –∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å –ø—Ä–∏–≤–µ–ª–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–∏—é";
    if (cruelty <= 0) return "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–∏–≤–µ–ª–æ –∫ –∞–Ω–∞—Ä—Ö–∏–∏";
    if (technology >= 100) return "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã—à–ª–∏ –∏–∑-–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è";
    if (technology <= 0) return "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤–µ–ª –∫ —É–ø–∞–¥–∫—É";
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞";
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function resetGame() {
    // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const gameOverScreen = document.querySelector('.game-over-screen');
    if (gameOverScreen) {
        gameOverScreen.remove();
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    const gameScreen = document.getElementById('gameScreen');
    if (gameScreen) {
        gameScreen.style.display = 'flex';
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    gameState = {
        traits: {
            wisdom: 50,
            cruelty: 50,
            technology: 50
        },
        resources: {
            gold: 1000,
            food: 500
        },
        territories: {
            capital: {
                population: 1000,
                buildings: []
            }
        },
        advisors: [],
        activeEvents: [],
        abilities: {
            inspiration: {
                cooldown: 0
            }
        },
        diplomacy: {
            northKingdom: {
                relation: 50
            }
        },
        survived_days: 0,
        era: 'medieval',
        currentDecision: null
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateTraitBars();
    updateDayCounter();
    updateEraDisplay();
    generateNewDecision();
}

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
function initializePlayerInfo() {
    const playerName = document.getElementById('player-name');
    if (playerName && tg.initDataUnsafe?.user?.first_name) {
        playerName.textContent = tg.initDataUnsafe.user.first_name;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —ç—Ä—ã
function updateTimeAndEra() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1183)
    const currentYear = 1183 + gameState.survived_days;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–¥–∞
    const yearCounter = document.querySelector('.year-counter');
    if (yearCounter) {
        yearCounter.textContent = currentYear;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π
    const yearsCount = document.querySelector('.years-count');
    if (yearsCount) {
        yearsCount.textContent = `${gameState.survived_days} –¥–Ω–µ–π`;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é showGames
function showGames() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    mainContent.innerHTML = `
        <div class="game-screen">
            <div class="game-header">
                <h1 class="game-title">AI Dynasty</h1>
                <p class="game-subtitle">–£–ø—Ä–∞–≤–ª—è–π –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ–º, –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è</p>
            </div>

            <div class="stats-container">
                <div class="stat-box">
                    <div class="stat-icon">üëë</div>
                    <div class="stat-value">${getBestScore() || 300}</div>
                </div>
                <div class="stat-box">
                    <div class="stat-icon">üéÆ</div>
                    <div class="stat-value">${getTotalGames() || 10}</div>
                </div>
            </div>

            <div class="menu-card">
                <div class="menu-items">
                    <div class="menu-item">
                        <div class="menu-item-icon">üëë</div>
                        <div class="menu-item-text">–ü—Ä–∞–≤—å –º—É–¥—Ä–æ</div>
                    </div>
                    <div class="menu-item">
                        <div class="menu-item-icon">‚öîÔ∏è</div>
                        <div class="menu-item-text">–ü–æ–±–µ–∂–¥–∞–π –≤—Ä–∞–≥–æ–≤</div>
                    </div>
                    <div class="menu-item">
                        <div class="menu-item-icon">üè∞</div>
                        <div class="menu-item-text">–†–∞–∑–≤–∏–≤–∞–π –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ</div>
                    </div>
                </div>
                <button class="start-button" id="startGameBtn">
                    <span class="button-icon">‚ñ∂Ô∏è</span>
                    <span>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</span>
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const startGameBtn = document.getElementById('startGameBtn');
    if (startGameBtn) {
        startGameBtn.addEventListener('click', startGame);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
document.addEventListener('DOMContentLoaded', function() {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    document.body.innerHTML = `
        <div class="main-content"></div>
        <div class="bottom-nav">
            <button class="nav-item active" data-screen="games">
                <span class="nav-icon">üéÆ</span>
                <span class="nav-text">–ò–≥—Ä—ã</span>
            </button>
            <button class="nav-item" data-screen="leaderboard">
                <span class="nav-icon">üèÜ</span>
                <span class="nav-text">–†–µ–π—Ç–∏–Ω–≥</span>
            </button>
            <button class="nav-item" data-screen="achievements">
                <span class="nav-icon">üåü</span>
                <span class="nav-text">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
            </button>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function() {
            const screen = this.getAttribute('data-screen');
            switch(screen) {
                case 'games':
                    showGames();
                    break;
                case 'leaderboard':
                    showLeaderboard();
                    break;
                case 'achievements':
                    showAchievements();
                    break;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    showGames();
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
function initializeSystems() {
    try {
        levelSystem = new LevelSystem();
        diarySystem = new DiarySystem();
        collectionsSystem = new CollectionSystem();
        dailyTasksSystem = new DailyTasksSystem();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        levelSystem.updateUI();
        if (diarySystem) diarySystem.updateDiaryUI();
        if (collectionsSystem) collectionsSystem.updateCollectionsUI();
        if (dailyTasksSystem) dailyTasksSystem.updateTasksUI();
        
        console.log('–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
function saveScore(score) {
    try {
        const scores = JSON.parse(localStorage.getItem('scores') || '[]');
        const newScore = {
            score: score,
            date: new Date().toISOString(),
            name: tg.initDataUnsafe?.user?.first_name || '–ò–≥—Ä–æ–∫',
            survived_days: gameState.survived_days,
            era: gameState.era
        };
        scores.push(newScore);
        scores.sort((a, b) => b.score - a.score); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        localStorage.setItem('scores', JSON.stringify(scores.slice(0, 10))); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const newAchievements = checkNewAchievements();
        if (newAchievements.length > 0) {
            showAchievementNotification(newAchievements);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
    }
}

function showAchievementNotification(achievements) {
    achievements.forEach(achievement => {
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <h3>üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h3>
            <p>${achievement.title}</p>
            <span>+${achievement.reward} –æ—á–∫–æ–≤</span>
        `;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }, 100);
    });
}

function updateLeaderboard() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const scores = JSON.parse(localStorage.getItem('scores') || '[]');
    
    mainContent.innerHTML = `
        <div class="leaderboard-screen">
            <h2 class="leaderboard-title">–†–µ–π—Ç–∏–Ω–≥</h2>
            <div class="leaderboard-list">
                ${scores.map((score, index) => `
                    <div class="leaderboard-item">
                        <div class="rank">${index + 1}</div>
                        <div class="player-info">
                            <div class="score-info">üèÜ ${score.score || 0}</div>
                            <div class="player-details">
                                <span>üìÖ ${score.survived_days || 0} –¥–Ω–µ–π</span>
                                <span>üåç ${getEraName(score.era) || '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ'}</span>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

function showAchievements() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    mainContent.innerHTML = `
        <h2 class="leaderboard-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        <div class="achievements-list">
            ${renderAchievements()}
        </div>
    `;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigation('achievements');
}

function checkNewAchievements() {
    const unlockedAchievements = JSON.parse(localStorage.getItem('achievements') || '[]');
    const newAchievements = [];
    
    Object.values(achievements).forEach(achievement => {
        if (!unlockedAchievements.includes(achievement.id) && achievement.condition(gameState)) {
            unlockedAchievements.push(achievement.id);
            newAchievements.push(achievement);
        }
    });
    
    localStorage.setItem('achievements', JSON.stringify(unlockedAchievements));
    return newAchievements;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∞–±–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            collectionsSystem.updateCollectionsUI();
        });
    });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getEraName(era) {
    const eraNames = {
        medieval: '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
        industrial: '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è —ç—Ä–∞',
        space: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç—Ä–∞'
    };
    return eraNames[era] || era;
}

function updateAIAppearance() {
    const face = document.querySelector('.ai-face');
    if (gameState.traits.cruelty > 70) {
        face.style.backgroundColor = '#FFB6C1';
    } else if (gameState.traits.wisdom > 70) {
        face.style.backgroundColor = '#98FB98';
    } else {
        face.style.backgroundColor = '#FFE4C4';
    }
}

function getRandomDecision() {
    return decisions[gameState.era][Math.floor(Math.random() * decisions[gameState.era].length)];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–≥—Ä (–≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω)
function showGames() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    mainContent.innerHTML = `
        <div class="game-screen">
            <div class="game-header">
                <h1 class="game-title">AI Dynasty</h1>
                <p class="game-subtitle">–£–ø—Ä–∞–≤–ª—è–π –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ–º, –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è</p>
            </div>

            <div class="stats-container">
                <div class="stat-box">
                    <div class="stat-icon">üëë</div>
                    <div class="stat-value">${getBestScore() || 300}</div>
                </div>
                <div class="stat-box">
                    <div class="stat-icon">üéÆ</div>
                    <div class="stat-value">${getTotalGames() || 10}</div>
                </div>
            </div>

            <div class="menu-card">
                <div class="menu-items">
                    <div class="menu-item">
                        <div class="menu-item-icon">üëë</div>
                        <div class="menu-item-text">–ü—Ä–∞–≤—å –º—É–¥—Ä–æ</div>
                    </div>
                    <div class="menu-item">
                        <div class="menu-item-icon">‚öîÔ∏è</div>
                        <div class="menu-item-text">–ü–æ–±–µ–∂–¥–∞–π –≤—Ä–∞–≥–æ–≤</div>
                    </div>
                    <div class="menu-item">
                        <div class="menu-item-icon">üè∞</div>
                        <div class="menu-item-text">–†–∞–∑–≤–∏–≤–∞–π –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ</div>
                    </div>
                </div>
                <button class="start-button" id="startGameBtn">
                    <span class="button-icon">‚ñ∂Ô∏è</span>
                    <span>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</span>
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const startGameBtn = document.getElementById('startGameBtn');
    if (startGameBtn) {
        startGameBtn.addEventListener('click', startGame);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é showLeaderboard
function showLeaderboard() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const scores = JSON.parse(localStorage.getItem('scores') || '[]');
    
    mainContent.innerHTML = `
        <div class="leaderboard-screen">
            <h2 class="leaderboard-title">–†–µ–π—Ç–∏–Ω–≥</h2>
            <div class="leaderboard-list">
                ${scores.map((score, index) => `
                    <div class="leaderboard-item">
                        <div class="rank">${index + 1}</div>
                        <div class="player-info">
                            <div class="score-info">üèÜ ${score.score || 0}</div>
                            <div class="player-details">
                                <span>üìÖ ${score.survived_days || 0} –¥–Ω–µ–π</span>
                                <span>üåç ${getEraName(score.era) || '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ'}</span>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
const styles = `
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background: #f5f5f5;
    height: 100vh;
}

.main-content {
    padding: 20px;
    padding-bottom: 70px;
    min-height: calc(100vh - 70px);
}

.bottom-nav {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 60px;
    background: white;
    display: flex;
    justify-content: space-around;
    align-items: center;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
}

.nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 8px;
    border: none;
    background: none;
    cursor: pointer;
    color: #666;
}

.nav-item.active {
    color: #007AFF;
}

.nav-icon {
    font-size: 24px;
    margin-bottom: 4px;
}

.nav-text {
    font-size: 12px;
}

.game-screen {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.game-title {
    font-size: 28px;
    margin-bottom: 10px;
    color: #333;
}

.game-subtitle {
    font-size: 16px;
    color: #666;
    margin-bottom: 20px;
}

.game-card {
    background: #007AFF;
    border-radius: 16px;
    padding: 20px;
    width: 100%;
    max-width: 400px;
    color: white;
}

.game-features {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 20px;
}

.feature {
    display: flex;
    align-items: center;
    gap: 10px;
}

.play-button {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 8px;
    background: white;
    color: #007AFF;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    cursor: pointer;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ */
.leaderboard-title {
    text-align: center;
    font-size: 24px;
    margin: 20px 0;
}

.leaderboard-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 0 16px;
}

.leaderboard-item {
    background: white;
    border-radius: 12px;
    padding: 16px;
    display: flex;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.rank {
    width: 24px;
    height: 24px;
    background: #007AFF;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-right: 12px;
}

.stat-row {
    display: flex;
    gap: 24px;
}

.stat-column {
    display: flex;
    align-items: center;
    gap: 4px;
}

.stat-label {
    font-size: 14px;
}

.stat-value {
    font-size: 14px;
    font-weight: bold;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievementStyles = `
    .achievements-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding: 16px;
    }

    .achievement-item {
        background: white;
        border-radius: 12px;
        padding: 16px;
        display: flex;
        align-items: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .achievement-item.locked {
        opacity: 0.5;
    }

    .achievement-info h3 {
        margin: 0 0 4px 0;
        font-size: 16px;
    }

    .achievement-info p {
        margin: 0;
        font-size: 14px;
        color: #666;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ—à–µ–Ω–∏–π
const cardStyles = `
    .decision-card {
        background: #007AFF;
        border-radius: 16px;
        padding: 20px;
        margin: 20px;
        color: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .decision-text {
        font-size: 18px;
        margin-bottom: 20px;
        text-align: center;
    }

    .decision-effects {
        display: flex;
        justify-content: space-between;
        gap: 20px;
    }

    .effects-column {
        flex: 1;
        background: rgba(255,255,255,0.1);
        padding: 12px;
        border-radius: 8px;
    }

    .effects-header {
        text-align: center;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .effects-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .effect-item {
        display: flex;
        align-items: center;
        gap: 8px;
        justify-content: center;
    }

    .effect-value {
        font-weight: bold;
    }

    .effect-item.positive .effect-value {
        color: #4CAF50;
    }

    .effect-item.negative .effect-value {
        color: #f44336;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.addEventListener('DOMContentLoaded', function() {
    const styleSheet = document.createElement("style");
    styleSheet.textContent = styles + achievementStyles + cardStyles;
    document.head.appendChild(styleSheet);
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
function initializeAdvisors() {
    gameState.advisors = [
        {
            id: 'priest',
            name: '–°–≤—è—â–µ–Ω–Ω–∏–∫',
            trait: 'wisdom',
            advice: (decision) => {
                // –°–≤—è—â–µ–Ω–Ω–∏–∫ –±–æ–ª—å—à–µ —Ü–µ–Ω–∏—Ç –º—É–¥—Ä–æ—Å—Ç—å –∏ –º–µ–Ω—å—à–µ - –∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å
                const wisdomChange = decision.approve.traits.wisdom || 0;
                const crueltyChange = decision.approve.traits.cruelty || 0;
                
                if (wisdomChange > 0 && crueltyChange <= 0) {
                    return {
                        recommendation: 'approve',
                        explanation: '–≠—Ç–æ –º—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
                    };
                } else {
                    return {
                        recommendation: 'deny',
                        explanation: '–≠—Ç–æ –Ω–µ –º—É–¥—Ä—ã–π –ø—É—Ç—å'
                    };
                }
            }
        },
        {
            id: 'general',
            name: '–ì–µ–Ω–µ—Ä–∞–ª',
            trait: 'cruelty',
            advice: (decision) => {
                // –ì–µ–Ω–µ—Ä–∞–ª –±–æ–ª—å—à–µ —Ü–µ–Ω–∏—Ç –∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                const crueltyChange = decision.approve.traits.cruelty || 0;
                const techChange = decision.approve.traits.technology || 0;
                
                if (crueltyChange > 0 || techChange > 0) {
                    return {
                        recommendation: 'approve',
                        explanation: '–≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –Ω–∞—Å —Å–∏–ª—å–Ω–µ–µ'
                    };
                } else {
                    return {
                        recommendation: 'deny',
                        explanation: '–≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Å–ª–∞–±–æ—Å—Ç–∏'
                    };
                }
            }
        },
        {
            id: 'scientist',
            name: '–£—á—ë–Ω—ã–π',
            trait: 'technology',
            advice: (decision) => {
                // –£—á—ë–Ω—ã–π –±–æ–ª—å—à–µ —Ü–µ–Ω–∏—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º—É–¥—Ä–æ—Å—Ç—å
                const techChange = decision.approve.traits.technology || 0;
                const wisdomChange = decision.approve.traits.wisdom || 0;
                
                if (techChange > 0 || wisdomChange > 0) {
                    return {
                        recommendation: 'approve',
                        explanation: '–≠—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω–µ—Ç –Ω–∞—à–∏ –∑–Ω–∞–Ω–∏—è'
                    };
                } else {
                    return {
                        recommendation: 'deny',
                        explanation: '–≠—Ç–æ –∑–∞—Ç–æ—Ä–º–æ–∑–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å'
                    };
                }
            }
        }
    ];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
function getAdvisorAdvices(decision) {
    return gameState.advisors.map(advisor => {
        return {
            advisor: advisor.name,
            ...advisor.advice(decision)
        };
    });
}

function updateTraitBars() {
    Object.entries(gameState.traits).forEach(([trait, value]) => {
        const bar = document.getElementById(`${trait}-bar`);
        if (bar) {
            bar.style.width = `${value}%`;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function showPreview(choice) {
    const decision = gameState.currentDecision[choice];
    if (!decision) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    Object.entries(decision.traits).forEach(([trait, change]) => {
        const statChange = document.querySelector(`#${trait}-change`);
        if (statChange) {
            const changeText = change >= 0 ? `+${change}` : change;
            statChange.textContent = changeText;
            statChange.className = `stat-change ${change >= 0 ? 'positive' : 'negative'}`;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function resetPreview() {
    const statChanges = document.querySelectorAll('.stat-change');
    statChanges.forEach(change => {
        change.textContent = '';
        change.className = 'stat-change';
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function addTouchSupport() {
    const approveBtn = document.querySelector('.decision-btn.approve');
    const denyBtn = document.querySelector('.decision-btn.deny');

    if (approveBtn) {
        approveBtn.addEventListener('touchstart', () => showPreview('approve'));
        approveBtn.addEventListener('touchend', resetPreview);
    }

    if (denyBtn) {
        denyBtn.addEventListener('touchstart', () => showPreview('deny'));
        denyBtn.addEventListener('touchend', resetPreview);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const menuHTML = `
    <div class="menu-screen">
        <h1 class="menu-title">–ù–∞–∑–≤–∞–Ω–∏–µ –ò–≥—Ä—ã</h1>
        <div class="menu-buttons">
            <button class="menu-btn" onclick="startGame()">–ò–≥—Ä–∞—Ç—å</button>
            <button class="menu-btn" onclick="showAchievements()">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</button>
            <button class="menu-btn" onclick="showLeaderboard()">–†–µ–π—Ç–∏–Ω–≥</button>
        </div>
    </div>
`;

// –û–±–Ω–æ–≤–ª—è–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievementsHTML = `
    <div class="achievements-screen screen">
        <div class="screen-header">
            <button class="back-btn" onclick="showGames()">
                <span class="nav-icon">‚Üê</span>
                <span class="nav-text">–ù–∞–∑–∞–¥</span>
            </button>
            <h2 class="screen-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        </div>
        <div class="achievements-grid">
            <!-- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
    </div>
`;

// –û–±–Ω–æ–≤–ª—è–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–π—Ç–∏–Ω–≥–∞
const leaderboardHTML = `
    <div class="leaderboard-screen screen">
        <div class="screen-header">
            <button class="back-btn" onclick="showMainMenu()">‚Üê</button>
            <h2 class="screen-title">–†–µ–π—Ç–∏–Ω–≥</h2>
        </div>
        <div class="leaderboard-list">
            <!-- –†–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
    </div>
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function renderAchievement(achievement) {
    return `
        <div class="achievement-card ${achievement.unlocked ? 'unlocked' : 'locked'}">
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <h3>${achievement.title}</h3>
                <p>${achievement.description}</p>
            </div>
            <div class="achievement-reward">+${achievement.reward}</div>
        </div>
    `;
}

function renderAchievements() {
    const achievements = [
        {
            id: 'survivor',
            title: '–í—ã–∂–∏–≤—à–∏–π',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 –¥–Ω–µ–π –ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            unlocked: gameState.survived_days >= 50
        },
        {
            id: 'wisdom_master',
            title: '–ú—É–¥—Ä–µ—Ü',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 80 –º—É–¥—Ä–æ—Å—Ç–∏',
            unlocked: gameState.traits.wisdom >= 80
        },
        {
            id: 'balanced',
            title: '–ì–∞—Ä–º–æ–Ω–∏—è',
            description: '–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã—à–µ 60',
            unlocked: Object.values(gameState.traits).every(v => v >= 60)
        },
        {
            id: 'space_age',
            title: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç—Ä–∞',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç—Ä—ã',
            unlocked: gameState.era === 'space'
        }
    ];

    return achievements.map(achievement => `
        <div class="achievement-item ${achievement.unlocked ? 'unlocked' : 'locked'}">
            <div class="achievement-info">
                <h3>${achievement.title}</h3>
                <p>${achievement.description}</p>
            </div>
        </div>
    `).join('');
}

function updateNavigation(activeScreen) {
    const items = document.querySelectorAll('.nav-item');
    items.forEach(item => item.classList.remove('active'));
    
    switch(activeScreen) {
        case 'games':
            items[0].classList.add('active');
            break;
        case 'leaderboard':
            items[1].classList.add('active');
            break;
        case 'achievements':
            items[2].classList.add('active');
            break;
    }
}

function updateDiplomacy() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–µ–≤–µ—Ä–Ω—ã–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const northKingdom = gameState.diplomacy.northKingdom;
    
    // –ï—Å–ª–∏ –º—É–¥—Ä–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è - —É–ª—É—á—à–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    if (gameState.traits.wisdom > 70) {
        northKingdom.relation = Math.min(100, northKingdom.relation + 2);
    }
    
    // –ï—Å–ª–∏ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è - —É—Ö—É–¥—à–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    if (gameState.traits.cruelty > 70) {
        northKingdom.relation = Math.max(0, northKingdom.relation - 2);
    }
}

function checkGameOver() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const isDead = Object.entries(gameState.traits).some(([trait, value]) => {
        // –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 0 –∏–ª–∏ 100
        return value <= 0 || value >= 100;
    });

    if (isDead) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç
        const finalScore = calculateScore(gameState);
        saveScore(finalScore);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        endGame();
        return true;
    }

    return false;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function showStatChanges(isApprove, decision) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—É—Å—Ç–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    return;
}

function hideStatChanges() {
    document.querySelectorAll('.stat-change').forEach(el => {
        el.style.opacity = '0';
    });
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
function initializeTerritories() {
    gameState.territories = {
        capital: {
            name: '–°—Ç–æ–ª–∏—Ü–∞',
            population: 1000,
            buildings: [],
            resources: {
                gold: 1000,
                food: 500
            }
        },
        villages: [],
        totalPopulation: 1000
    };
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
function startDailyCycle() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if (checkGameOver()) {
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–ø–ª–æ–º–∞—Ç–∏—é
    updateDiplomacy();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateInterface();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Ç
    if (!gameState.currentDecision) {
        generateNewDecision();
    }
}

function getBestScore() {
    const scores = JSON.parse(localStorage.getItem('scores') || '[]');
    if (scores.length === 0) return 0;
    return Math.max(...scores.map(s => s.score || 0));
}

function getTotalGames() {
    const scores = JSON.parse(localStorage.getItem('scores') || '[]');
    return scores.length;
}

function getRecentAchievements() {
    const achievements = JSON.parse(localStorage.getItem('achievements') || '[]');
    return achievements
        .slice(-3)
        .map(a => `
            <div class="achievement">
                <span class="achievement-icon">${a.icon}</span>
                <span class="achievement-name">${a.name}</span>
            </div>
        `)
        .join('') || '–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π';
}

function showTutorial() {
    const mainContent = document.querySelector('.main-content');
    if (!mainContent) return;

    mainContent.innerHTML = `
        <div class="tutorial">
            <h2>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h2>
            <div class="tutorial-content">
                <p>üëâ –°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ø—Ä–∞–≤–æ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ</p>
                <p>üëà –°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ª–µ–≤–æ, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å</p>
                <p>üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ —Å–≤–æ–µ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞</p>
                <p>üéØ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ</p>
            </div>
            <button class="menu-button" onclick="showMainMenu()">–ù–∞–∑–∞–¥</button>
        </div>
    `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AOS
document.addEventListener('DOMContentLoaded', function() {
    AOS.init({
        duration: 800,
        once: true
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—à–µ–Ω–∏—è
function createDecisionCard(decision) {
    // ... existing code ...
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    gsap.from(card, {
        duration: 0.6,
        y: 100,
        opacity: 0,
        ease: "back.out(1.7)",
        clearProps: "all"
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
    card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = (y - centerY) / 20;
        const rotateY = (centerX - x) / 20;
        
        gsap.to(card, {
            duration: 0.5,
            rotateX: rotateX,
            rotateY: rotateY,
            ease: "power2.out"
        });
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    card.addEventListener('mouseleave', () => {
        gsap.to(card, {
            duration: 0.5,
            rotateX: 0,
            rotateY: 0,
            ease: "power2.out"
        });
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–≤–∞–π–ø–µ
    let startX;
    let isDragging = false;

    card.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        isDragging = true;
    });

    card.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        
        const currentX = e.touches[0].clientX;
        const deltaX = currentX - startX;
        
        gsap.to(card, {
            duration: 0.1,
            x: deltaX,
            rotation: deltaX * 0.1,
            ease: "power2.out"
        });
    });

    card.addEventListener('touchend', () => {
        isDragging = false;
        gsap.to(card, {
            duration: 0.5,
            x: 0,
            rotation: 0,
            ease: "elastic.out(1, 0.5)"
        });
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è
    const effects = card.querySelectorAll('.effect-item');
    effects.forEach((effect, index) => {
        effect.setAttribute('data-aos', 'fade-up');
        effect.setAttribute('data-aos-delay', (index * 100).toString());
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è
function animateDecision(approved) {
    const card = document.querySelector('.decision-card');
    if (!card) return;

    const direction = approved ? 1 : -1;
    const color = approved ? '#4CAF50' : '#ff4444';

    gsap.to(card, {
        duration: 0.5,
        x: direction * window.innerWidth,
        rotation: direction * 30,
        ease: "power2.in",
        backgroundColor: color,
        onComplete: () => {
            card.remove();
            generateNewDecision();
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function setupDecisionButtons() {
    document.getElementById('approveBtn')?.addEventListener('click', () => animateDecision(true));
    document.getElementById('denyBtn')?.addEventListener('click', () => animateDecision(false));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
function getTelegramUserData() {
    if (window.Telegram && window.Telegram.WebApp) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        return {
            name: user.first_name,
            avatar: user.photo_url,
            username: user.username,
            id: user.id
        };
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
function showPlayerProfile() {
    const userData = getTelegramUserData();
    const profileContainer = document.createElement('div');
    profileContainer.className = 'player-profile';
    
    profileContainer.innerHTML = `
        <div class="profile-header">
            <div class="profile-avatar">
                <img src="${userData?.avatar || 'default-avatar.png'}" alt="Avatar">
            </div>
            <div class="profile-info">
                <h3 class="profile-name">${userData?.name || '–ò–≥—Ä–æ–∫'}</h3>
                <span class="profile-username">@${userData?.username || ''}</span>
            </div>
        </div>
    `;

    return profileContainer;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
function savePlayerProgress(progress) {
    const userData = getTelegramUserData();
    if (userData) {
        const saveData = {
            userId: userData.id,
            progress: progress,
            lastSaved: new Date().toISOString()
        };
        localStorage.setItem(`gameProgress_${userData.id}`, JSON.stringify(saveData));
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
function loadPlayerProgress() {
    const userData = getTelegramUserData();
    if (userData) {
        const savedData = localStorage.getItem(`gameProgress_${userData.id}`);
        return savedData ? JSON.parse(savedData).progress : null;
    }
    return null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebApp
tg.onEvent('viewportChanged', () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (gameState) {
        savePlayerProgress(gameState);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç Telegram
tg.onEvent('mainButtonClicked', () => {
    // –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if (tg.MainButton.text === '–ù–ê–ß–ê–¢–¨ –ò–ì–†–£') {
        startGame();
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function addNavigationButton() {
    const backBtn = document.createElement('button');
    backBtn.className = 'navigation-button';
    backBtn.innerHTML = '‚Üê –ù–∞–∑–∞–¥';
    backBtn.onclick = () => {
        showGames();
    };
    
    document.querySelector('.main-content').prepend(backBtn);
} 